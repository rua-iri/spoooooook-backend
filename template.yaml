AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31
Description: >
  spoooooook-backend

  SAM Template for spoooooook-backend

# More info about Globals: https://github.com/awslabs/serverless-application-model/blob/master/docs/globals.rst
Globals:
  Function:
    Timeout: 3
    MemorySize: 128
    Environment:
      Variables:
        DB_NAME: !Ref UsersTable
  Api:
    Cors:
      AllowMethods: "'*'"
      AllowHeaders: "'content-type'"
      AllowOrigin: "'*'"

Resources:

  UsersTable:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
        - AttributeName: username
          AttributeType: "S"
      KeySchema:
        - AttributeName: username
          KeyType: HASH
      ProvisionedThroughput:
        ReadCapacityUnits: 1
        WriteCapacityUnits: 1
      StreamSpecification:
        StreamViewType: NEW_IMAGE

  GetAllFilms:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: films/
      Handler: getAllFilms.lambda_handler
      Runtime: python3.11
      Architectures:
        - x86_64
      Events:
        GetAllFilms:
          Type: Api
          Properties:
            Path: /films
            Method: get

  GetFilm:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: films/
      Handler: getFilm.lambda_handler
      Runtime: python3.11
      Architectures:
        - x86_64
      Events:
        GetFilms:
          Type: Api
          Properties:
            Path: /film
            Method: get

  GetFilmLink:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: films/
      Handler: getFilmLink.lambda_handler
      Runtime: python3.11
      Architectures:
        - x86_64
      Events:
        GetFilmsLink:
          Type: Api
          Properties:
            Path: /film-link
            Method: get

  UserLogin:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: user/
      Handler: loginUser.lambda_handler
      Runtime: python3.11
      Architectures:
        - x86_64
      Events:
        UserLogin:
          Type: Api
          Properties:
            Path: /user-login
            Method: post
      Policies:
        - Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Action:
                - dynamoDB:GetItem
                - dynamoDB:PutItem
              Resource: !GetAtt UsersTable.Arn

  UserRegister:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: user/
      Handler: registerUser.lambda_handler
      Runtime: python3.11
      Architectures:
        - x86_64
      Events:
        UserRegister:
          Type: Api
          Properties:
            Path: /user-register
            Method: post
      Policies:
        - Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Action:
                - dynamoDB:GetItem
                - dynamoDB:PutItem
              Resource: !GetAtt UsersTable.Arn


Outputs:
  # ServerlessRestApi is an implicit API created out of Events key under Serverless::Function
  # Find out more about other implicit resources you can reference within SAM
  # https://github.com/awslabs/serverless-application-model/blob/master/docs/internals/generated_resources.rst#api
  GetAllFilmsApi:
    Description: "API Gateway endpoint URL for Prod stage for GetAllFilms function"
    Value: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/films/"
  GetAllFilms:
    Description: "GetAllFilms Lambda Function ARN"
    Value: !GetAtt GetAllFilms.Arn
  GetAllFilmsIamRole:
    Description: "Implicit IAM Role created for GetAllFilms function"
    Value: !GetAtt GetAllFilms.Arn
